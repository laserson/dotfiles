[user]
	name = Uri Laserson
	email = uri.laserson@gmail.com
# Some add'l settings from this post:
# https://blog.gitbutler.com/how-git-core-devs-configure-git/
[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix
[branch]
	autosetuprebase = always
[core]
	editor = vim
	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space
	# Make `git rebase` safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false
	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false
	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true
	autocrlf = input
	safecrlf = true
	excludesfile = ~/.gitignore
[color]
	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
	ui = auto
[diff]
	renames = true
	algorithm = histogram
	colorMoved = plain
	mnemonicPrefix = true
[help]
	# Automatically correct and execute mistyped commands
	autocorrect = prompt
[merge]
	# Include summaries of merged commits in newly created merge commit messages
	log = true
	conflictstyle = zdiff3
[fetch]
	# prune remote-tracking branches no longer on remote by default
	prune = true
	pruneTags = true
	all = true
[push]
	# https://git-scm.com/docs/git-config#git-config-pushdefault
	default = simple
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true
[credential]
	helper = osxkeychain
[alias]
	# View abbreviated SHA, description, and history graph of the latest 20 commits
	l = log --pretty=oneline -n 20 --graph --abbrev-commit
	# Fancier logs
	pl = "log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative"
	gl = "log --graph --full-history --all --color --pretty=format:'%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s'"
	# View the current working tree status using the short format
	s = status -s
	# Show the diff between the latest commit and the current state
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch -a
	remotes = remote -v
	# List aliases
	aliases = config --get-regexp alias
	# Remove branches that have already been merged with master
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
	# List contributors with number of commits
	contributors = shortlog --summary --numbered
	churn = "!f() { git log --all -M -C --name-only --format='format:' \"$@\" | sort | grep -v '^$' | uniq -c | sort | awk 'BEGIN {print \"count\tfile\"} {print $1 \"\t\" $2}' | sort -g; }; f"
	dft = difftool
[column]
	ui = auto
[tag]
	sort = version:refname
[init]
	defaultBranch = main
[commit]
	verbose = true
[rerere]
	enabled = true
	autoupdate = true
[rebase]
	autoSquash = true
	autoStash = true
	updateRefs = true
[pull]
	rebase = true

